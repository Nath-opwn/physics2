#!/usr/bin/env python3
"""
高级知识库内容填充脚本
为流体动力学模拟系统添加高级知识内容
"""

import sys
import os
from sqlalchemy.orm import Session

# 添加项目根目录到Python路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.database.database import SessionLocal, engine
from src.models.models import KnowledgeItem, Base

# 确保数据库表存在
Base.metadata.create_all(bind=engine)

# 高级知识条目数据
advanced_knowledge_items = [
    # 高级数值方法
    {
        "title": "高阶精度数值方法",
        "category": "numerical_methods",
        "content": """
# 高阶精度数值方法

在流体动力学模拟中，高阶精度数值方法可以显著提高计算结果的准确性，尤其是对于复杂流动和湍流模拟。

## WENO方法 (Weighted Essentially Non-Oscillatory)

WENO方法是一种高阶精度的数值方案，特别适用于含有间断和强梯度的流动问题。

### 主要特点：
- 自适应地选择最平滑的模板
- 在间断处保持高分辨率
- 避免虚假振荡
- 可达到5阶甚至更高精度

### 基本原理：
WENO方法通过加权平均多个低阶重构来获得高阶精度，权重根据局部流场平滑度动态调整。

## 谱方法

谱方法使用全局基函数（如傅里叶级数、切比雪夫多项式）来近似解，对于光滑问题具有指数收敛性。

### 优势：
- 极高的精度
- 减少数值耗散和色散误差
- 对于周期性问题特别有效

### 应用场景：
- 直接数值模拟(DNS)
- 湍流的精细结构研究
- 声波传播模拟

## 紧致有限差分格式

紧致格式使用隐式关系来计算导数，提高了计算精度和分辨率。

### 特点：
- 使用较少的网格点获得高阶精度
- 减少数值色散误差
- 改善波数分辨率

这些高阶方法虽然计算成本较高，但在需要高精度模拟的场景中价值显著，如航空航天、气象和海洋模型等领域。
        """,
        "tags": "数值方法,WENO,谱方法,高阶精度,紧致格式"
    },
    
    # 湍流模型
    {
        "title": "湍流模拟方法详解",
        "category": "advanced_topics",
        "content": """
# 湍流模拟方法详解

湍流是流体动力学中最复杂的现象之一，其特点是多尺度、非线性、三维和不稳定。以下是主要的湍流模拟方法：

## 直接数值模拟 (DNS)

DNS直接求解完整的Navier-Stokes方程，不使用任何湍流模型。

### 特点：
- 最准确的方法，可以解析所有尺度的湍流结构
- 计算成本极高，与Re^3成比例增长
- 仅适用于低到中等雷诺数流动
- 主要用于基础研究和验证其他模型

## 大涡模拟 (LES)

LES明确计算大尺度涡旋，而对小尺度涡旋使用亚格子模型。

### 常用亚格子模型：
- Smagorinsky模型
- 动态Smagorinsky模型
- WALE模型(Wall-Adapting Local Eddy-viscosity)

### 应用：
- 复杂几何形状中的流动
- 中等到高雷诺数流动
- 需要时间精确模拟的非稳态流动

## 雷诺平均Navier-Stokes方程 (RANS)

RANS对流动进行时间平均，模拟平均流场而非瞬时流场。

### 常用RANS模型：
- k-ε模型：广泛应用于工业流动
- k-ω模型：更适合边界层流动
- SST模型：结合k-ε和k-ω的优点
- Reynolds应力模型：直接模拟雷诺应力张量

### 优势：
- 计算成本低
- 适用于高雷诺数工程应用
- 稳定性好

## 混合方法

### DES (Detached Eddy Simulation)：
- 在边界层使用RANS
- 在分离区域使用LES
- 平衡计算成本和精度

### SAS (Scale-Adaptive Simulation)：
- 自动调整解析尺度
- 在不稳定区域提供LES类似的分辨率

选择合适的湍流模拟方法需要考虑问题的物理特性、所需精度和可用计算资源。
        """,
        "tags": "湍流,DNS,LES,RANS,湍流模型,数值模拟"
    },
    
    # 多相流
    {
        "title": "多相流模拟技术",
        "category": "advanced_topics",
        "content": """
# 多相流模拟技术

多相流涉及两种或多种不同相态的流体（气体、液体、固体颗粒）同时流动的情况，在工业和自然界中广泛存在。

## 多相流分类

### 按相态组合：
- 气-液流：如气泡流、雾滴流
- 液-液流：如油水乳状液
- 气-固流：如流化床
- 液-固流：如悬浮流、泥浆流

### 按界面结构：
- 分离流：相界面清晰可辨
- 分散流：一相分散在另一相中
- 过渡流：介于分离和分散之间

## 主要模拟方法

### VOF方法 (Volume of Fluid)
- 追踪体积分数
- 适用于不混溶流体界面
- 优点：质量守恒性好
- 缺点：界面重构复杂

### Level Set方法
- 使用符号距离函数表示界面
- 优点：界面处理平滑
- 缺点：质量守恒性较差

### 相场方法 (Phase Field)
- 使用连续函数描述相变
- 适合模拟复杂拓扑变化
- 可以自然处理界面张力

### 欧拉-拉格朗日方法
- 连续相：欧拉网格
- 分散相：拉格朗日粒子
- 适用于气-固、液-固流动

## 关键物理模型

### 界面张力模型
- CSF (Continuum Surface Force)模型
- CSS (Continuum Surface Stress)模型

### 相变模型
- Lee模型
- 基于温度的相变模型

### 颗粒-流体相互作用
- 阻力模型
- 虚拟质量力
- Basset力

多相流模拟是计算流体力学中最具挑战性的领域之一，需要综合考虑界面追踪、相变、表面张力等复杂物理现象。
        """,
        "tags": "多相流,VOF,Level Set,相场方法,界面追踪,气液两相流"
    },
    
    # 流固耦合
    {
        "title": "流固耦合模拟方法",
        "category": "advanced_topics",
        "content": """
# 流固耦合模拟方法

流固耦合(FSI, Fluid-Structure Interaction)是研究流体与可变形结构之间相互作用的学科，在航空航天、生物医学、土木工程等领域有广泛应用。

## 耦合机制

### 单向耦合
- 流体影响结构，但结构不反作用于流体
- 适用于结构变形小的情况
- 计算效率高，实现简单

### 双向耦合
- 流体与结构完全相互作用
- 更准确地模拟物理现象
- 计算成本高，收敛性挑战大

## 数值方法

### 基于网格的方法

#### ALE方法 (Arbitrary Lagrangian-Eulerian)
- 流体域使用可变形网格
- 网格随结构变形而变化
- 优点：界面处理准确
- 缺点：大变形时网格质量下降

#### 重叠网格方法 (Chimera/Overset)
- 使用多个重叠网格
- 结构周围使用独立网格
- 优点：处理大位移问题
- 缺点：插值可能引入误差

### 非网格方法

#### 浸没边界法 (Immersed Boundary Method)
- 在固定欧拉网格上模拟流体
- 通过源项表示结构影响
- 优点：避免网格变形和重构
- 应用：生物流体、复杂几何

#### 格子Boltzmann方法 (LBM)
- 基于粒子动力学
- 易于并行化
- 适合复杂几何和多相流

## 求解策略

### 强耦合方法
- 每个时间步内迭代求解流体和结构
- 保证界面条件严格满足
- 计算稳定但成本高

### 弱耦合方法
- 交替求解流体和结构
- 计算效率高但可能不稳定
- 适用于轻微FSI问题

### 分区方法
- 流体和结构使用不同求解器
- 通过接口交换信息
- 可利用现有专业软件

流固耦合模拟需要同时考虑流体动力学和结构力学，是多物理场模拟的典型代表。
        """,
        "tags": "流固耦合,FSI,ALE,浸没边界法,多物理场"
    },
    
    # 计算流体力学优化
    {
        "title": "基于CFD的形状优化",
        "category": "advanced_topics",
        "content": """
# 基于CFD的形状优化

基于计算流体力学(CFD)的形状优化是一种通过数值模拟和优化算法自动改进流体相关设计的方法。

## 优化流程

### 1. 参数化
- 使用参数化方法描述几何形状
- 常用方法：
  - 样条曲线/曲面
  - 自由形状变形(FFD)
  - CAD参数
  - 形状基函数

### 2. CFD分析
- 对每个候选形状进行流体分析
- 计算目标函数(如阻力、升力、压降等)
- 可能需要考虑多物理场效应

### 3. 灵敏度分析
- 计算设计变量对目标函数的影响
- 方法：
  - 有限差分法
  - 伴随方法(高效处理大量设计变量)
  - 自动微分

### 4. 优化算法
- 梯度法：BFGS、共轭梯度法
- 无梯度法：遗传算法、粒子群优化
- 代理模型：克里金、神经网络

## 应用领域

### 航空航天
- 机翼和机身优化
- 发动机进气道设计
- 涡轮叶片优化

### 汽车工业
- 空气动力学外形优化
- 内部冷却系统设计
- 降噪设计

### 能源领域
- 风力涡轮机叶片设计
- 热交换器优化
- 管道系统设计

## 高级技术

### 多目标优化
- 同时优化多个相互冲突的目标
- 生成帕累托前沿
- 决策支持系统

### 鲁棒优化
- 考虑不确定性因素
- 提高设计的可靠性
- 减少对制造公差的敏感性

### 拓扑优化
- 允许材料分布的根本变化
- 发现创新设计
- 结合增材制造技术

基于CFD的形状优化结合了流体力学、数值方法和优化理论，是现代工程设计中的强大工具。
        """,
        "tags": "形状优化,CFD优化,参数化,灵敏度分析,多目标优化"
    },
    
    # 流体可视化
    {
        "title": "高级流体可视化技术",
        "category": "visualization",
        "content": """
# 高级流体可视化技术

流体可视化是理解复杂流动现象的关键工具，现代可视化技术可以揭示流体动力学数据中的深层结构和模式。

## 矢量场可视化

### 流线和路径线
- **流线**：与流场瞬时速度矢量相切的曲线
- **路径线**：流体质点随时间运动的实际轨迹
- **流迹线**：特定时间内从固定点释放的所有质点的轨迹

### LIC (Line Integral Convolution)
- 基于纹理的可视化技术
- 沿流线方向模糊白噪声纹理
- 能够显示流场的连续结构
- 适合二维和三维流场

### 矢量箭头和胶囊
- 直观表示流动方向和大小
- 可结合颜色编码表示附加信息
- 适合选择性显示关键区域

## 标量场可视化

### 体绘制技术
- 直接体绘制(DVR)
- 最大强度投影(MIP)
- 通过传递函数映射数据到颜色和不透明度

### 等值面和等值线
- 连接相同数值点的曲面/曲线
- 有效显示特定值的空间分布
- 可使用多个半透明等值面叠加

### 切片可视化
- 在二维平面上显示三维数据
- 可交互调整切片位置和方向
- 结合颜色映射和等值线增强效果

## 特征提取与分析

### 涡识别方法
- Q准则：第二不变量
- λ₂准则：速度梯度张量特征值
- 涡量和螺旋度

### 激波检测
- 基于压力梯度
- 基于密度梯度
- 基于马赫数变化

### 拉格朗日相干结构(LCS)
- 识别流体传输屏障
- 基于有限时间Lyapunov指数(FTLE)
- 揭示流场中的隐藏结构

## 交互式可视化

### 虚拟现实(VR)技术
- 沉浸式三维流场探索
- 直观交互和导航
- 支持协作分析

### 实时交互技术
- 动态调整可视化参数
- 实时过滤和聚焦
- 多视图联动分析

高级流体可视化不仅是数据展示工具，更是流体动力学研究和工程设计中的分析手段，能够帮助研究者发现传统方法难以识别的流动特征和规律。
        """,
        "tags": "流体可视化,流线,体绘制,涡识别,交互式可视化,LIC"
    }
]

def add_advanced_knowledge():
    """向数据库添加高级知识条目"""
    db = SessionLocal()
    try:
        # 检查是否已存在相同标题的条目
        existing_titles = [item.title for item in db.query(KnowledgeItem).all()]
        
        count = 0
        for item_data in advanced_knowledge_items:
            if item_data["title"] not in existing_titles:
                # 创建新的知识条目
                db_item = KnowledgeItem(
                    title=item_data["title"],
                    category=item_data["category"],
                    content=item_data["content"],
                    tags=item_data["tags"]
                )
                db.add(db_item)
                count += 1
        
        db.commit()
        print(f"成功添加 {count} 条高级知识条目")
        
    except Exception as e:
        db.rollback()
        print(f"添加知识条目时出错: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    add_advanced_knowledge() 